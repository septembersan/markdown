[[plugins]]
repo = 'tyru/caw.vim.git'
hook_add ='''
    nmap cc <Plug>(caw:hatpos:toggle)
    vmap cc <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add ='''
    set laststatus=2
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#whitespace#mixed_indent_algo = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline_theme = 'papercolor'
    "let g:airline_theme = 'tomorrow'
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#show_buffers = 0
    let g:airline#extensions#tabline#tab_nr_type = 1
    let g:airline#extensions#tabline#fnamemod = ':t'
    let g:airline_left_sep='>'
'''

[[plugins]]
repo = 'MattesGroeger/vim-bookmarks'
hook_add ='''
    nnoremap mb :BookmarkToggle<CR>
'''

[[plugins]]
repo = 'Shougo/dein.vim'

# [[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
# repo = 'osyo-manga/vim-precious'
# depends = ['context_filetype.vim']
#
# [[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
# repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'kassio/neoterm'

[[plugins]]
repo = 'jonathanfilip/vim-lucius'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'vim-scripts/Align'
hook_add = '''
    vnoremap <Space>a :Align 
    let g:Align_xstrlen=3
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
    " [Usage]
    " tag jump: p
    let g:tagbar_width = 30
    let g:tagbar_autoshowtag = 0
    let g:tagbar_expand = 1
    let g:tagbar_left = 1
    noremap <silent> <F8> :TagbarToggle<CR>
    set statusline=%F%m%r%h%w\%=%{tagbar#currenttag('[%s]','')}\[Pos=%v,%l]\[Len=%L]
'''

[[plugins]]
repo = 'vim-scripts/zoom.vim'
hook_add = '''
'''

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
    " let g:EasyMotion_do_mapping = 0
    " nmap s <Plug>(easymotion-s2)
    " xmap s <Plug>(easymotion-s2)
    " omap z <Plug>(easymotion-s2)
    " nmap g/ <Plug>(easymotion-sn)
    " xmap g/ <Plug>(easymotion-sn)
    " omap g/ <Plug>(easymotion-tn)
    " let g:EasyMotion_smartcase = 1
    " map <Leader>j <Plug>(easymotion-j)
    " map <Leader>k <Plug>(easymotion-k)
    " let g:EasyMotion_startofline = 0
    " let g:EasyMotion_keys = 'QZASDFGHJKL;'
    " let g:EasyMotion_use_upper = 1
    " let g:EasyMotion_enter_jump_first = 1
    " let g:EasyMotion_space_jump_first = 1
    " hi EasyMotionTarget guifg=#80a0ff ctermfg=81
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add ='''
'''

[[plugins]]
repo = '5t111111/alt-gtags.vim'
hook_add ='''
'''

[[plugins]]
repo = 'fuenor/qfixgrep'
hook_add ='''
'''

[[plugins]]
repo = 'fuenor/qfixhowm'
hook_add ='''
    let QFixHown_Key = 'g'
    if has('win64')
        let howm_dir = 'c:/howm'
        let howm_fileencoding = 'cp932'
        let howm_fileformat = 'dos'
    else
        let howm_dir = '/home/okada-hxf'
        let howm_fileencoding = 'utf-8'
        let howm_fileencoding = 'unix'
    endif
    let howm_filename = '%Y/%m/%Y^%m-%d-%H%M%S.txt'
    let g:QFixHowm_WildCardChapter = 1
    let QFixHowm_FoldingChapterTitle = 1
    let QFixHowm_Folding = 0

    nnoremap <space>a gg<S-v><S-g>
    vnoremap <space>c "*y
    nnoremap <space>v "*p
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add ='''
    vnoremap <Enter> <Plug>(EasyAlign)
    nnoremap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'pebble8888/doxygen_comment_creator'
hook_add ='''
'''

[[plugins]]
repo = 'vim-scripts/gtags.vim'
hook_add ='''
'''

[[plugins]]
repo = 'tomasr/molokai'
hook_add ='''
'''

[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'
hook_add ='''
    noremap ,d :Dox<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add ='''
    inoremap <C-k> <Plug>(neosnippet_expand_or_jump)
    snoremap <C-k> <Plug>(neosnippet_expand_or_jump)
    xnoremap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'fuenor/qfixgrep'
hook_add ='''
'''

[[plugins]]
repo = 'vim-scripts/gtags.vim'

[[plugins]]
repo = 'tomasr/molokai'
hook_add ='''
'''

[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'
hook_add ='''
    noremap ,d :Dox<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add ='''
inoremap <C-k> <Plug>(neosnippet_expand_or_jump)
snoremap <C-k> <Plug>(neosnippet_expand_or_jump)
xnoremap <C-k> <Plug>(neosnippet_expand_target)
let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets/,~/.vim/snippets'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
hook_add ='''
'''

[[plugins]]
repo = 'kana/vim-operator-user'
hook_add ='''
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add ='''
map t <Plug>(operator-replace)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
hook_add ='''
    " nnoremap sa <Plug>(operator-surround-append-input-in-advance)
    " nnoremap s( <Plug>(operator-surround-append-input-in-advance)(
    " nnoremap sb <Plug>(operator-surround-append-input-in-advance)(
    " nnoremap s{ <Plug>(operator-surround-append-input-in-advance){
    " nnoremap s[ <Plug>(operator-surround-append-input-in-advance)[
    " nnoremap s" <Plug>(operator-surround-append-input-in-advance)"
    " nnoremap s' <Plug>(operator-surround-append-input-in-advance)'
    map <silent>sa <Plug>(operator-surround-append)
    map <silent>sd <Plug>(operator-surround-delete)
    map <silent>sr <Plug>(operator-surround-replace)

    nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
    nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)

    "map <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-anyblock-a)
    "map <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-anyblock-a)

    "map <silent>sdb <Plug>(operator-surround-delete)<Plug>(textobj-between-a)
    "map <silent>srb <Plug>(operator-surround-replace)<Plug>(textobj-between-a)
'''

[[plugins]]
repo = 'emonkak/vim-operator-comment'
hook_add ='''
'''

[[plugins]]
repo = 'emonkak/vim-operator-sort'
hook_add ='''
'''

[[plugins]]
repo = 'osyo-manga/vim-operator-search'
hook_add ='''
nmap <Space>; <Plug>(operator-search)if
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
hook_add ='''
"let g:linediff_first_buffer_command = 'tabnew'
"let g:linediff_secommand_buffer_command = 'rightbelow vertical new'
vnoremap <Space>d :Linediff<CR>
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
hook_add ='''
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add ='''
    " key mappings
    " noremap [Denite] <Nop>
    " nmap <Leader>f [Denite]

    nnoremap <silent> <Space>o :<C-u>Denite -direction=top file_mru<CR>
    nnoremap <silent> <Space>b :<C-u>Denite -direction=top buffer<CR>
    nnoremap <silent> <Space>f :<C-u>DeniteBufferDir -direction=top file_rec<CR>
    nnoremap <silent> <Space>g :<C-u>DeniteBufferDir -direction=top grep<CR>
    nnoremap <silent> <Space>i :<C-u>Denite line -direction=top<CR>
    nnoremap <silent> ,g       :<C-u>Denite grep -direction=top -no-empty -no-quit -buffer-name=search-buffer<CR>
    nnoremap <silent> <Space>n :<C-u>Denite -resume -immediately -select=+1<CR>
    nnoremap <silent> <Space>p :<C-u>Denite -resume -immediately -select=-1<CR>
    "nnoremap <Space>d :<C-u>Denite -direction=topleft -cursor-wrap=true bookmark<CR>
    "nnoremap <Space>a :<C-u>DeniteBookmarkAdd<CR>
    "nnoremap <Space>h :<C-u>Denite help<CR>
    " ウィンドウを分割して開く
    "call denite#custom#map('_', "<C-h>", '<denite:do_action:split>')
    "call denite#custom#map('insert', "<C-h>", '<denite:do_action:split>')
    " ウィンドウを縦に分割して開く
    "call denite#custom#map('_', "<C-v>", '<denite:do_action:vsplit>')
    "call denite#custom#map('insert', "<C-v>", '<denite:do_action:vsplit>')
    " インサート→ノーマルモード
    call denite#custom#map('insert', "mm", '<denite:enter_mode:normal>')
    if executable('rg')
        " コマンド．file_rec で使うコマンド
        call denite#custom#var('file_rec', 'command', ['rg', '--files', '--glob', '!.git'])
        " コマンド．grep で使うコマンド
        call denite#custom#var('grep', 'command', ['rg'])
        "call denite#custom#var('grep', 'recursive_opts', )
        "call denite#custom#var('grep', 'final_opts', )
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
    else
        " コマンド．file_rec で使うコマンド
        call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    endif
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_source = '''
    let g:deoplete#enable_at_startup = 1
'''
hook_post_source = '''
    let g:deoplete#omni_patterns = {}
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'
hook_add = '''
    let g:deoplete#sources#jedi#python_path = '/root/anaconda3/bin/python'
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
hook_add = '''
        let g:jedi#auto_initialization = 1
        let g:jedi#auto_vim_configuration = 1

        nnoremap [jedi] <Nop>
        xnoremap [jedi] <Nop>
        nnoremap <Leader>j [jedi]
        xnoremap <Leader>j [jedi]

        "# 補完キーの設定この場合???Ctrl+Space
        let g:jedi#completions_command = "<C-Space>"
        "# 変数の宣言場所へジャンプ???Ctrl + g)
        let g:jedi#goto_assignments_command = "<C-g>"
        "# クラス???関数定義にジャンプ???Gtrl + d???
        let g:jedi#goto_definitions_command = "<C-j>"
        "# Pydocを表示???Ctrl + k???
        let g:jedi#documentation_command = "<C-k>"
        let g:jedi#rename_command = "[jedi]r"
        let g:jedi#usages_command = "<C-h>"
        let g:jedi#popup_select_first = 0
        " let g:jedi#popup_on_dot = 0
        let g:jedi#show_call_signatures = 1
        let g:jedi#show_call_signatures_delay = 10
'''

[[plugins]]
repo = 'iyuuya/denite-ale'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_sign_error = 'x'
    let g:ale_sign_warning = '⚠'
    let g:ale_lint_on_save = 1
    let g:ale_lint_on_text_changed = 0

    nmap [ale] <Nop>
    map <C-k> [ale]
    nmap <silent> [ale]<C-p> <Plug>(ale_previous)
    nmap <silent> [ale]<C-n> <Plug>(ale_next)

    highlight clear ALEErrorSign
    highlight clear ALEWarningSign
'''
#     let g:ale_sign_column_always = 1
#     let g:ale_lint_on_enter = 1
#     let g:ale_linters = {
#     \   'python': ['flake8'],
#     \}
#

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_add = '''
    let g:gen_tag#ctags_auto_gen = 1
    let g:gen_tag#gtags_auto_gen = 1
'''

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'janko-m/vim-test'
depends = ['vim-dispatch']
hook_add = '''
    let g:test#strategy = 'dispatch'
'''

[[plugins]]
repo = 'aliev/vim-compiler-python'

