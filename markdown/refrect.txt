◆反省点/*{{{*/
反省点: FD書の記述粒度が細かすぎたこと /*{{{*/
[工程]
 - FD
[影響]
 - 記述に膨大な工数を要した
 - 粒度が高すぎ機能設計レベルでの誤りを検出しにくくなっていた
   (逆に詳細設計では粒度を下げたたため、そこで誤りを発見した)
 　※修正にも必要以上の工数をかけてしまっている
[原因]
 - 機能設計レベルでなく詳細設計レベルでの記述を行っていた
   ex) タイムアウト値を算出する記述で算出過程/工程をひとつずつ
       記述していた
       1. 現在時間取得
       2. 経過時間算出
          算出式
       3. タイムアウト値算出

       - 修正するなら以下
         開始処理からの経過時間を算出し、タイムアウト値を取得する
[対策]
 機能設計レベルで記述するため以下を実施する
 1. 機能設計レベルを(方針として[仮])定義する
 2. 定義したレベルで軽い機能の設計を行い一度レビューを実施する
 3. 粒度の指摘があった場合、定義を更新する
/*}}}*/
反省点: 設計の初期から対機能かつ複雑な設計を目指したこと/*{{{*/
[工程]
 - FD
[影響]
 - 多機能にしたことが他の機能に影響し工数が増大した
 - 複雑なため手戻りが増え、工数が増大した
[原因]
 - 諸段階から多機能にしようと考えたこと
 - 機能に対しての見積もりをおこなわなかったこと
   (追記する機能に対しての見積もりと
    その追記機能による他機能の修正見積もり)
[対策]
 - 諸段階では要件に対して必要最低限の設計を行う
 - 要件に対してもっともシンプルな方法で設計を行う
 - 多機能化する場合は必要最低限の設計を行ってから
   見積もりを立て設計すること
/*}}}*/
反省点: バグの管理が完全にできていなかった/*{{{*/
詳細:   管理票に完全に起票できていなかった
        (修正点も同様)
[工程]
 - 全工程
[影響]
 - 修正箇所のみの修正が不可能になる
 - 修正分析ができなくなる
 - 修正見積もりが定量的にできなくなる
[原因]
 - 修正実施を先に行い、管理を後回しにしたため
[対策]
 - 管理作業(起票)を先に行う
 以下のルーチンを習慣化する
 ---------------------------------
 1. 修正事項発見
 2. 管理(起票: リスト化)
 3. 管理情報展開
 4. 修正
 ---------------------------------
/*}}}*/
反省点: 見積もりと実際の作業時間の差異について /*{{{*/
[工程]
 - 全工程
[影響]
 - ほとんどの工程で実際の作業が見積もりよりも多くなり
   見積もり期間を超過していた
   -> リスケジュールが妥当であるのか、機能を削減するなど
      対策をたてれなくなる
[原因]
 - 見積もりが管理されていない
 - 定量的な見積もりができていない
   ex) 作業がいくつあり、その作業にどの程度かかるかが管理されていないため
       (管理されていないため、どの作業が超過したのかを把握できない)
[対策]
 - 見積もり用リストの作成を徹底する
   +------------+--------+----------+
   | 作業項目数 | 完了数 | 残項目数 |
   +============+========+==========+
   | XXX件      | XX件   | XX件     |
   +------------+--------+----------+

   +-------------------------+
   | 一件あたりの作業工数(h) |
   +=========================+
   | XXh                     |
   +-------------------------+
/*}}}*/
反省点: 既存モジュールの仕様認識不足/*{{{*/
[工程]
 - FD, DD, CD
[影響]
 - バグが多数検出される
[原因]
 - モジュールを実際の入力パターンで動作確認しなかった
 - 使用例の確認を徹底できていなかった
[対策]
 - 使用例の徹底
 - 動作確認の徹底
/*}}}*/
反省点: 性能評価を実施する際の知識不足 /*{{{*/
[工程]
 - 全工程
[影響]
 - 
[原因]
 - 
[対策]
 - 
/*}}}*/
/*}}}*/
◆よかった点 /*{{{*/
  - UMLモデリングの実施
  - プロタイプの作成
    -> 問題領域(設計対象)が理解できた
    -> 早期のプロトタイプ作成により機能設計の
       イメージがつかめた
    -> Dモジュールの使用方法が理解できた
  - テストモデリングの実施
    - テストの不足事項の検出
/*}}}*/
