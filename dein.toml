# Usage
# @reload:call dein#recache_runtimepath()
# @lazy  :lazy = 1

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add ='''
    nmap <Space>s <Plug>(quickhl-manual-this)
    nmap <Space>se <Plug>(quickhl-manual-reset)
'''

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add ='''
    set laststatus=2
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#whitespace#mixed_indent_algo = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#ale#enabled = 1
    let g:airline#extensions#ale#error_symbol = 'E:'
    let g:airline#extensions#ale#warning_symbol = 'W:'
    " let g:airline_theme = 'dracula'
    " let g:airline_theme = 'iceberg'
    let g:airline_theme = 'tomorrow'
    " let g:airline_theme = 'breezy'
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#show_buffers = 0
    let g:airline#extensions#tabline#tab_nr_type = 1
    let g:airline#extensions#virtualenv#enabled = 1
    let g:airline#extensions#tabline#fnamemod = ':t'
    " let g:airline_left_sep='>'
'''

[[plugins]]
repo = 'MattesGroeger/vim-bookmarks'
hook_add ='''
    nnoremap mb :BookmarkToggle<CR>
'''

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
    let g:neoterm_size = 14
    let g:neoterm_autoscroll =1
    let g:neoterm_autoinsert = 1
    " terminal position
    let g:neoterm_default_mod='belowright'
    nnoremap <silent> <C-e><C-e> :call My_TREPLSendSelection()<cr>
    vnoremap <silent> <C-e><C-e> V:TREPLSendSelection<cr>
    nnoremap <silent> <C-e><C-f> :call Exec_python()<cr>
    " nnoremap <silent> <C-e><C-f> :TREPLSendFile<cr>'>j0
    nnoremap <silent> ttn  :Tnew<CR>
    nnoremap <silent> tti  :Topen<cr>
    nnoremap <silent> ttc  :Tclose<cr>
    nnoremap <silent> tto  :Ttoggle<CR>
    nnoremap <silent> ttt  :call My_New_Terminal_Tab()<CR>
    nnoremap <silent> tts  :call My_New_Terminal_VSplit()<cr>
    nnoremap <silent> ttk  :Tkill<cr>
    nnoremap <silent> <F5> :T pdb %<CR><c-w>ki
    function! My_TREPLSendSelection()
        Topen
        :TREPLSendLine
    endfunction

    function! My_New_Terminal_Tab()
        " let g:neoterm_fixedsize = winfixheight
        let g:neoterm_size = winheight(0) - 10
        tabnew
        Tnew
        let g:neoterm_size = 10
    endfunction

    function! My_New_Terminal_VSplit()
        " let g:neoterm_fixedsize = winfixheight
        let g:neoterm_size = winwidth(0) / 2
        vertical Tnew
        " wincmd h
        " call feedkeys("i")
        let g:neoterm_size = 10
    endfunction

    function! Exec_python()
        :w!
        let g:neoterm_autoinsert = 0
        Topen
        Tclear
        T python3.6 %
        let g:neoterm_autoinsert = 1
    endfunction

    if has('vim_starting')
        let &t_ti.="¥e[1 q"
        let &t_SI.="¥e[5 q"
        let &t_EI.="¥e[1 q"
        let &t_te.="¥e[0 q"
    endif

'''

[[plugins]]
repo = 'jonathanfilip/vim-lucius'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'fneu/breezy'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'vim-scripts/Align'
hook_add = '''
    vnoremap <Space>a :Align 
    let g:Align_xstrlen=3
'''

[[plugins]]
repo = 'majutsushi/tagbar'
lazy = 1
hook_add = '''
    nnoremap <silent> <F8> :TagbarToggle<CR>
    nnoremap <Space>t :TagbarOpenAutoClose<CR>
'''
hook_source = '''
    " [Usage]
    " tag jump: p
    let g:tagbar_width = 30
    let g:tagbar_autoshowtag = 0
    let g:tagbar_expand = 1
    " let g:tagbar_left = 1
    "set statusline=%F%m%r%h%w¥%=%{tagbar#currenttag('[%s]','')}¥[Pos=%v,%l]¥[Len=%L]
'''

[[plugins]]
repo = 'vim-scripts/zoom.vim'
hook_add = '''
'''

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
    " let g:EasyMotion_do_mapping = 0
    " nmap s <Plug>(easymotion-s2)
    " xmap s <Plug>(easymotion-s2)
    " omap z <Plug>(easymotion-s2)
    " nmap g/ <Plug>(easymotion-sn)
    " xmap g/ <Plug>(easymotion-sn)
    " omap g/ <Plug>(easymotion-tn)
    " let g:EasyMotion_smartcase = 1
    " map <Leader>j <Plug>(easymotion-j)
    " map <Leader>k <Plug>(easymotion-k)
    " let g:EasyMotion_startofline = 0
    " let g:EasyMotion_keys = 'QZASDFGHJKL;'
    " let g:EasyMotion_use_upper = 1
    " let g:EasyMotion_enter_jump_first = 1
    " let g:EasyMotion_space_jump_first = 1
    " hi EasyMotionTarget guifg=#80a0ff ctermfg=81
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add ='''
'''

[[plugins]]
repo = '5t111111/alt-gtags.vim'
hook_add ='''
'''

[[plugins]]
repo = 'fuenor/qfixgrep'
hook_add ='''
'''

# [[plugins]]
# repo = 'fuenor/qfixhowm'
# hook_add ='''
#     let QFixHown_Key = 'g'
#     if has('win64')
#         let howm_dir = 'c:/howm'
#         let howm_fileencoding = 'cp932'
#         let howm_fileformat = 'dos'
#     else
#         let howm_dir = '/home/okada-hxf'
#         let howm_fileencoding = 'utf-8'
#         let howm_fileencoding = 'unix'
#     endif
#     let howm_filename = '%Y/%m/%Y^%m-%d-%H%M%S.txt'
#     let g:QFixHowm_WildCardChapter = 1
#     let QFixHowm_FoldingChapterTitle = 1
#     let QFixHowm_Folding = 0
#
#     nnoremap <space>a gg<S-v><S-g>
#     vnoremap <space>c "*y
#     nnoremap <space>v "*p
# '''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add ='''
    vnoremap <Enter> <Plug>(EasyAlign)
    nnoremap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'pebble8888/doxygen_comment_creator'
hook_add ='''
'''

# [[plugins]]
# repo = 'vim-scripts/gtags.vim'
# hook_add ='''
# '''

[[plugins]]
repo = 'tomasr/molokai'
hook_add ='''
'''

[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'
hook_add ='''
    noremap ,d :Dox<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add ='''
    inoremap <C-k> <Plug>(neosnippet_expand_or_jump)
    snoremap <C-k> <Plug>(neosnippet_expand_or_jump)
    xnoremap <C-k> <Plug>(neosnippet_expand_target)
    let g:neosnippet#snippets_directory='~/home/aapfuser/.cache/neosnippet/my'
'''

[[plugins]]
repo = 'fuenor/qfixgrep'
hook_add ='''
'''

[[plugins]]
repo = 'tomasr/molokai'
hook_add ='''
'''

[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'
hook_add ='''
    noremap ,d :Dox<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
hook_add ='''
'''

[[plugins]]
repo = 'kana/vim-operator-user'
hook_add ='''
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add ='''
map R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
hook_add ='''
    " nnoremap sa <Plug>(operator-surround-append-input-in-advance)
    " nnoremap s( <Plug>(operator-surround-append-input-in-advance)(
    " nnoremap sb <Plug>(operator-surround-append-input-in-advance)(
    " nnoremap s{ <Plug>(operator-surround-append-input-in-advance){
    " nnoremap s[ <Plug>(operator-surround-append-input-in-advance)[
    " nnoremap s" <Plug>(operator-surround-append-input-in-advance)"
    " nnoremap s' <Plug>(operator-surround-append-input-in-advance)'
    map <silent>sa <Plug>(operator-surround-append)
    map <silent>sd <Plug>(operator-surround-delete)
    map <silent>sr <Plug>(operator-surround-replace)

    nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
    nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)

    "map <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-anyblock-a)
    "map <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-anyblock-a)

    "map <silent>sdb <Plug>(operator-surround-delete)<Plug>(textobj-between-a)
    "map <silent>srb <Plug>(operator-surround-replace)<Plug>(textobj-between-a)
'''

[[plugins]]
repo = 'emonkak/vim-operator-comment'
hook_add ='''
'''

[[plugins]]
repo = 'emonkak/vim-operator-sort'
hook_add ='''
'''

[[plugins]]
repo = 'osyo-manga/vim-operator-search'
hook_add ='''
    " nmap <Space>/ <Plug>(operator-search)<cr>
    " vmap <Space>/ <Plug>(operator-search)
    " nmap <Space>; <Plug>(operator-search)if
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
hook_add ='''
let g:linediff_first_buffer_command = 'leftabove new'
let g:linediff_secommand_buffer_command = 'rightbelow vertical new'
vnoremap <C-d> :Linediff<CR>
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'
hook_add ='''
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add ='''
    " http://replicity.hateblo.jp/entry/2017/06/03/140731
    call denite#custom#option('default', 'prompt', '>')
    call denite#custom#option('default', 'direction', 'top')
    " key mappings
    " noremap [Denite] <Nop>
    " nmap <Leader>f [Denite]

    nnoremap <silent> <Space>uo :<C-u>Denite -direction=top file_mru<CR>
    " nnoremap <silent> <Space>b :<C-u>Denite -direction=top buffer<CR>
    nnoremap <silent> <Space>f :<C-u>DeniteBufferDir -direction=top file_rec<CR>
    " nnoremap <silent> <Space>g :<C-u>DeniteBufferDir -direction=top grep<CR>
    nnoremap <silent> <Space>i :<C-u>Denite line -direction=top<CR>
    nnoremap <silent> ,g       :<C-u>Denite grep -direction=top -no-empty -no-quit -buffer-name=search-buffer<CR>
    "nnoremap <silent> <Space>n :<C-u>Denite -resume -immediately -select=+1<CR>
    "nnoremap <silent> <Space>p :<C-u>Denite -resume -immediately -select=-1<CR>
    "nnoremap <Space>d :<C-u>Denite -direction=topleft -cursor-wrap=true bookmark<CR>
    "nnoremap <Space>a :<C-u>DeniteBookmarkAdd<CR>
    "nnoremap <Space>h :<C-u>Denite help<CR>
    " ウィンドウを分割して開く
    call denite#custom#map('_', "<C-h>", '<denite:do_action:split>')
    call denite#custom#map('insert', "<C-h>", '<denite:do_action:split>')
    " ウィンドウを縦に分割して開く
    call denite#custom#map('_', "<C-v>", '<denite:do_action:vsplit>')
    call denite#custom#map('insert', "<C-v>", '<denite:do_action:vsplit>')
    " ウィンドウをタブで開く
    call denite#custom#map('normal', "t", '<denite:do_action:tabopen>')
    call denite#custom#map('insert', "<c-t>", '<denite:do_action:tabopen>')
    call denite#custom#map('normal', "l", '<denite:do_action:default>')
    " インサート→ノーマルモード
    call denite#custom#map('insert', "mm", '<denite:enter_mode:normal>')

    if executable('rg')
        " コマンド．file_rec で使うコマンド
        " call denite#custom#var('file_rec', 'command', ['rg', '--files', '--glob', '!.git'])
        " コマンド．grep で使うコマンド
        call denite#custom#var('grep', 'command', ['rg'])
        "call denite#custom#var('grep', 'recursive_opts', )
        "call denite#custom#var('grep', 'final_opts', )
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
    endif

    ".git以下のディレクトリ検索
    nnoremap <silent> <Space>gf :<C-u>Denite -direction=topleft -cursor-wrap=true
          \ -path=`substitute(finddir('.git', './;'), '.git', '', 'g')`
          \ file_rec/git<CR>
    call denite#custom#source('file'    , 'matchers', ['matcher_cpsm', 'matcher_fuzzy'])
    call denite#custom#source('buffer'  , 'matchers', ['matcher_regexp'])
    call denite#custom#source('file_mru', 'matchers', ['matcher_regexp'])
    call denite#custom#alias('source', 'file_rec/git', 'file_rec')
    call denite#custom#var('file_rec/git', 'command',
      \ ['git', 'ls-files', '-co', '--exclude-standard'])
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_source = '''
    let g:deoplete#enable_at_startup = 1
'''
hook_post_source = '''
    let g:deoplete#omni_patterns = {}
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'
# hook_add = '''
hook_source = '''
    let g:deoplete#sources#jedi#python_path = substitute(system('which python3.6'), "¥n", "", "")
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
# lazy=1
# hook_add = '''
hook_source = '''
        let g:jedi#auto_initialization = 1
        let g:jedi#auto_vim_configuration = 1

        "# 補完キーの設定この場合???Ctrl+Space
        let g:jedi#completions_command = "<C-Space>"
        "# 変数の宣言場所へジャンプ???Ctrl + g)
        " let g:jedi#goto_assignments_command = "<C-g>"
        "# クラス???関数定義にジャンプ???Gtrl + d???
        " let g:jedi#goto_definitions_command = "<C-j>"
        nnoremap <C-j><C-j> :call jedi#goto_definitions()<cr>
        nnoremap <C-j>s :call Jedi_my_setting_sp()<cr>
        nnoremap <C-j>t :call Jedi_my_setting_tab()<cr>
        function! Jedi_my_setting_sp()
            :vs
            :call jedi#goto_definitions()
        endfunction
        function! Jedi_my_setting_tab()
            :tab sp
            :call jedi#goto_definitions()
        endfunction
        "# Pydocを表示???Ctrl + k???
        " let g:jedi#documentation_command = "<C-k>"
        let g:jedi#usages_command = "<C-k>"
        let g:jedi#popup_select_first = 0
        " let g:jedi#popup_on_dot = 0
        let g:jedi#show_call_signatures = 1
        let g:jedi#show_call_signatures_delay = 10

        " nnoremap <silent><C-j> :call jedi#goto_definitions()<CR>
        " nnoremap <silent><C-h> :call jedi#usages_command()<CR>
        nnoremap <silent><C-n> :cnext<cr>
        nnoremap <silent><C-p> :cprev<cr>
'''

[[plugins]]
repo = 'iyuuya/denite-ale'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_sign_error = '>>'
    let g:ale_sign_warning = '??'
    let g:ale_lint_on_save = 1
    let g:ale_lint_on_text_changed = 0
    let g:ale_statusline_format = ['x %d', '? %d', 'o ok']
    let g:ale_linters = { 
                \   'python3.6': ['flake8'],
                \   'markdown': ['alex'],
                \   'JSON': ['jq']
                \}

    nmap [ale] <Nop>
    map <C-k> [ale]
    nmap <silent> [ale]<C-p> <Plug>(ale_previous)
    nmap <silent> [ale]<C-n> <Plug>(ale_next)

    highlight clear ALEErrorSign
    highlight clear ALEWarningSign
    " let g:ale_sign_column_always = 1
    " let g:ale_lint_on_enter = 1
    " let g:lightline = {
    "             \'active': {
    "             \ 'left': [
    "             \   ['mode', 'paste'],
    "             \   ['readonly', 'filename', 'modified', 'ale'],
    "             \],
    "             \},
    "             \'component_function':{
    "             \   'ale': 'ALEGetStatusLine'
    "             \}
    "             \}
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'janko-m/vim-test'
depends = ['vim-dispatch']
hook_add = '''
    let g:test#strategy = 'dispatch'
'''

[[plugins]]
repo = 'aliev/vim-compiler-python'

[[plugins]]
repo = 'hellosputnik/vim-plugin'
hook_add = '''
    " let g:kite_auto_complete=0
    " let g:kite_tab_complete=1
    " set completeopt-=menu
    " set completeopt+=menuone
    " set completeopt-=longest
    " set completeopt-=preview
    " set completeopt+=noinsert
    " set completeopt-=noselect
    " set completeopt+=preview
    " autocmd CompleteDone * if !pumvisible() | pclose | endif
    " set belloff+=ctrlg
    " nmap <silent> <buffer> gK <Plug>(kite-hover)
    " let g:kite_documentation_continual=1
    " let g:kite_preview_code=1
    " let g:kite_override_sign_column_highlight=0
    " set statusline=%<%f¥ %h%m%r%{kite#statusline()}%=%-14.(%l,%c%V%)¥ %P
    " set laststatus=2
'''

[[plugins]]
repo = 'neovim/python-client'

# [[plugins]]
# repo = 'lighttiger2505/gtags.vim'
# hook_add = '''
#     " Options
#     let g:Gtags_Auto_Map = 0
#     let g:Gtags_OpenQuickfixWindow = 1
#     " Keymap
#     " Show definetion of function cousor word on quickfix
#     nmap <silent> K :<C-u>exe("Gtags ".expand('<cword>'))<CR>
#     " Show reference of cousor word on quickfix
#     nmap <silent> R :<C-u>exe("Gtags -r ".expand('<cword>'))<CR>
# '''

[[plugins]]
repo = 'ozelentok/denite-gtags'
on_ft = 'python'
hook_add = '''
    " autocmd FileType python call s:denite_gtags_settings()
    " function! s:denite_gtags_settings() abort
    "     nmap <C-j> :DeniteCursorWord -buffer-name=gtags_def gtags_def<cr>
    "     nmap <C-h> :DeniteCursorWord -buffer-name=gtags_ref gtags_ref<cr>
    " endfunction
'''

# [[plugins]]
# repo = 'jsfaint/gen_tags.vim'
# hook_add = '''
#     let g:gen_tags#gtags_auto_gen = 1
# '''

[[plugins]]
repo = 'tyru/caw.vim.git'
hook_add ='''
    nmap cc <Plug>(caw:hatpos:toggle)
    vmap cc <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'dracula/vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add ='''
    " autocmd vimenter * NERDTree
    nnoremap <F7> :NERDTreeToggle<cr>
    let g:NERDTreeDirArrows = 1
    let g:NERDTreeDirArrowExpandable  = '▶'
    let g:NERDTreeDirArrowCollapsible = '▼'
    let g:NERDTreeMapUpdir = "h"
    " let g:NERDTreeMapPreviewSplit = "h"
    let g:NERDTreeMapOpenVSplit = "v"
    let g:NERDTreeMapPreviewVSplit = "<C-v>"
    let g:NERDTreeMapOpenInTabSilent = "<C-t>"
    let g:NERDTreeMapActivateNode = "l"
'''

[[plugins]]
repo = 'xolox/vim-misc'
hook_add ='''
'''

[[plugins]]
repo = 'xolox/vim-session'
depends = ['xolox/vim-misc']
hook_add ='''
    nnoremap <F10> :SaveSession 
    nnoremap <silent> <F11> :OpenSession<CR>

    " 現在のディレクトリ直下の .vimsessions/ を取得
    let s:local_session_directory = '~/.config/nvim/sessions'
    " session保存ディレクトリをそのディレクトリの設定
    " let g:session_directory = s:local_session_directory
    let g:session_directory = "~/.cache/dein/repos/github.com/xolox"
    " vim終了時に自動保存
    let g:session_autosave = 'yes'
    " 引数なしでvimを起動した時にsession保存ディレクトリのdefault.vimを開く
    "let g:session_autoload = 'yes'
    " 5分間に1回自動保存
    " let g:session_autosave_periodic = 5
    unlet s:local_session_directory
    let g:session_autoload = 'no'
'''

# [[plugins]]
# repo = 'mattn/sonictemplate-vim'
# hook_add ='''
#     let g:sonictemplate_vim_template_dir = [
#           \ '~/.config/nvim/template'
#           \]
# '''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
on_ft = 'python'
hook_add ='''
    nnoremap <C-h> :IndentGuidesToggle<cr>
    let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]]
repo = 'tweekmonster/braceless.vim'
on_ft = 'python'
hook_add ='''
    " Usage:
    " vip, cip
    " >ip, >iP
    " [[, ]], [m, ]m
    autocmd FileType python BracelessEnable +fold +highlight
    let g:braceless_jump_prev_key = '['
    let g:braceless_jump_next_key = ']'
    let g:braceless_segment_prev_key = 'k'
    let g:braceless_segment_next_key = 'j'
'''

[[plugins]]
repo = 'alfredodeza/pytest.vim'
on_ft = 'python'
hook_add ='''
    " function! Pytest_session()
    "     :Pytest file
    "     :Pytest session
    " endfunction
    nnoremap <silent> tps :Pytest session<cr>
    nnoremap <silent> tpj :call My_python_file()<cr>
    nnoremap <silent> tpc :Pytest class<cr>
    nnoremap <silent> tpf :Pytest function<cr>
    nnoremap <silent> tpe :Pytest fails<cr>
    nnoremap <silent> tpn :Pytest next<cr>
    nnoremap <silent> tpp :Pytest previous<cr>
    nnoremap <silent> tpd :Pytest file --pdb<cr>
    nnoremap <silent> tpo :call Create_pytest_file()<cr>
    function! My_python_file()
        :w
        :Pytest file
    endfunction
    function! Create_pytest_file()
        :tabedit ‾/hiroomi.py
    endfunction

'''

[[plugins]]
repo = 'osyo-manga/vim-over' 
hook_add ='''
    nnoremap <silent> <S-s> :OverCommandLine<CR>%s///g<Left><Left><Left> 
    vnoremap <silent> <S-s> :OverCommandLine<CR>%s///g<Left><Left><Left> 
'''

[[plugins]]
repo = 'Shougo/unite.vim' 
depends = ['vimproc.vim']
hook_add ='''
    nnoremap <Space>d :<C-u>Unite -default-action=vimfiler directory directory_mru<cr>
    " autocmd FileType unite nmap <silent><buffer><Space> <NOP>
    autocmd FileType unite nmap <silent><buffer><expr> f unite#do_action('vimfiler')

    let g:unite_enable_start_insert=1
    nnoremap <silent> <Space>ub :<C-u>Unite buffer<CR>
    " nnoremap <silent> <Space>uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
    nnoremap <silent> <Space>ur :<C-u>Unite file_rec<CR>
    nnoremap <silent> <Space>o  :<C-u>Unite file_mru<CR>
    nnoremap <silent> <Space>um :<C-u>Unite vim_bookmarks<CR>
    nnoremap <silent> <Space>uu :<C-u>Unite buffer file_mru<CR>
    nnoremap <silent> <Space>uy :<C-u>Unite history/yank<CR>
    nnoremap <silent> <Space>bk  :<C-u>Unite bookmark<CR>
    nnoremap <silent> <Space>bf  :<C-u>Unite buffer<CR>
    nnoremap <silent> <Space>r  :<C-u>Unite vimfiler/history<CR>
    nnoremap <silent> ,ug       :<C-u>Unite grep:. -no-empty -no-quit -buffer-name=search-buffer<CR>
    " nnoremap <silent> <Space>gf :<C-u>Unite file_rec/async:!<CR>
    "nnoremap <silent> <Space>d :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
    "au FileType unite nnoremap <silent> <buffer> <expr> <C-h> unite#do_action('split')
    "au FileType unite inoremap <silent> <buffer> <expr> <C-h> unite#do_action('split')
    au FileType unite nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
    au FileType unite nnoremap <silent> <buffer> <expr> l unite#do_action('default')
    "au FileType unite inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
    au FileType unite nnoremap <silent> <buffer> <expr> t unite#do_action('tabopen')
    au FileType unite inoremap <silent> <buffer> <expr> <c-t> unite#do_action('tabopen')
    au FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
    au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q
    
    inoremap <buffer> <mm> <Plug> (uite_insert_leave)
    " nnoremap <silent> <buffer> <expr> <C-q> <Plug> (unite_exit)
    " inoremap <silent> <buffer> <expr> <C-q> <Plug> (unite_exit)

    " autocmd FileType unite nmap <silent><buffer><expr> f unite#do_action('vimfiler')
    " let g:unite_source_find_default_opts = '-type d'

    if executable('rg')
        let g:unite_source_grep_command = 'rg'
        let g:unite_source_grep_recursive_opt = '' 
    endif
'''

[[plugins]]
repo = 'Shougo/vimproc.vim' 
build = 'make'
on_source = ['vimfiler.vim']

[[plugins]]
repo = 'Shougo/vimfiler.vim' 
depends = 'unite.vim'
hook_add ='''
    let g:vimfiler_max_directories_history = 100
    autocmd VimEnter * VimFilerBufferDir -split -simple -no-quit -winwidth=30 -toggle -no-focus -auto-cd
    nnoremap <silent> <Space>e :VimFilerBufferDir -split -simple -no-quit -winwidth=30 -toggle -auto-cd<cr>
    function! Vimfiler_mysplit()
        wincmd l
        vsplit
        wincmd h
        call feedkeys("ls")
    endfunction

    autocmd FileType vimfiler call s:vimfiler_my_settings()
    function! s:vimfiler_my_settings() abort
        map <silent><buffer><Space> <NOP>
        map <silent><buffer><C-j> <NOP>
        map <silent><buffer>v <NOP>
        " File open is cr
        " nmap <silent><buffer><expr> <cr> vimfiler#smart_cursor_map("¥<Plug>(vimfiler_cd_file)", "¥<Plug>(vimfiler_open_file_in_another_vimfiler)")
        " nmap <buffer><silent> <Space>o <Plug>(vimfiler_switch_to_history_directory)
        " nmap <buffer><silent> <C-v> :call Vimfiler_mysplit()<cr>
        nmap <silent><buffer> ? :help vimfiler-default-key-mappings<cr>
        nmap <silent><buffer><expr> <C-v> vimfiler#do_switch_action('vsplit')
        nmap <silent><buffer><expr> <C-h> vimfiler#do_switch_action('split')
        nmap <silent><buffer><expr> <C-t> vimfiler#do_switch_action('tabopen')
        nmap <silent><buffer> <C-m> <Plug>(vimfiler_toggle_mark_current_line)
        " nmap <silent><buffer> <Space>f <Plug>(vimfiler_find)
        nmap <silent><buffer> ,g <Plug>(vimfiler_grep)
        " nmap <silent><buffer><silent> <C-k> vimfiler#do_action('vsplit')
    endfunction
'''

[[plugins]]
repo = 'tpope/vim-fugitive' 
hook_add ='''
    nnoremap <silent> <Space>vb :Gblame<cr>
    nnoremap <silent> <Space>vd :Gdiff<cr>
    nnoremap <silent> <Space>vs :Gstatus<cr>
    nnoremap <silent> <Space>vl :Glog<cr>
    " Usage 3-way diff :Gstatus -> D -> :diffget //2 |diffup -> :diffget //3 |diffup -> ]c -> :only
    nnoremap <silent> <Space>vr :Gread<cr>
    nnoremap <silent> <Space>gc :Gcd<cr>
    nnoremap <Space>gp :Gpull 
    nnoremap <Space>gg :call My_Ggrep()<cr>
    function! My_Ggrep()
        :Gcd
        call feedkeys(",ug")
    endfunction
'''

[[plugins]]
repo = 'mzlogin/vim-markdown-toc' 
hook_add ='''
'''

[[plugins]]
repo = 'kmnk/vim-unite-giti' 
hook_add ='''
    " Usage: branch switch -> giti/branch new -> switch(`git branch -b`)
    nnoremap <silent> <Space>gb  :<C-u>Unite giti/branch_all<CR>
    " nnoremap <silent> <Space>gc  :<C-u>Unite giti/config<CR>
    " nnoremap <silent> <Space>gl  :<C-u>Unite giti/log<CR>
    nnoremap <silent> <Space>gl  :Gitv<CR>
    nnoremap <silent> <Space>gL  :Gitv!<CR>
    nnoremap <silent> <Space>gr  :<C-u>Unite giti/remote<CR>
    nnoremap <silent> <Space>gs  :<C-u>Unite giti/status<CR>
    " nnoremap <silent> <Space>gg  :<C-u>Unite giti/grep<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter' 
hook_add ='''
'''

[[plugins]]
repo = 'gregsexton/gitv' 
hook_add ='''
    " Frequently cmd
    " ------------------------
    " * ファイルごとのdiffを確認する場合
    "   :Gitv! -> D (diff) # compare file(between HEAD and select commit)
    " * ログからdiffを確認する場合(一覧)
    "   :Gitv  -> Enter -> zM
    "   :Gitv  -> Enter -> Enter on target file
    autocmd FileType git call s:gitv_my_settings()
    function! s:gitv_my_settings()
        " set statusline+=%{fugitive#statusline()}
        setlocal foldlevel=99
        nmap <silent><buffer> t O
        nmap <silent><buffer> v s
    endfunction
'''

[[plugins]]
repo = 'plytophogy/vim-virtualenv' 
hook_add ='''
    nnoremap <F7> :VirtualEnvActivate 
    nnoremap <F6> :VirtualEnvDeactivate<cr>
'''

[[plugins]]
repo = 'simeji/winresizer' 
hook_add ='''
    let g:winresizer_start_key = 'mr'
    let g:winresizer_keycode_cancel = 'c'
'''

[[plugins]]
repo = 'vim-scripts/DrawIt' 
hook_add ='''
'''

[[plugins]]
repo = 'gyim/vim-boxdraw' 
hook_add ='''
    nnoremap dm :DrawIt
    nnoremap ds :DrawIt!
'''

[[plugins]]
repo = 'Shougo/deol.nvim' 
hook_add ='''
'''

[[plugins]]
repo = 'mattn/webapi-vim' 
hook_add ='''
" > <https://www.key-p.com/blog/staff/archives/20732>
nnoremap <silent><F4> :call MyFeed()<cr>

function! MyFeed()
    tabnew
    let result = webapi#feed#parseURL("http://sampo-03.asou.nec.co.jp:50080/dashboard/projects.atom?rss_token=-jHpUfyr4qgdP4AkgNBe")
    let count = 0
    let lines = []
    for item in result
        let str = join(["[ ]", item.date, item.title, item.content, item.link], ' :')
        call append(count, str)
        call add(lines, str)
        let count += 1
        " echo keys(item)
    endfor
    let outputfile = "~/.cache/dein/repos/github.com/mattn/save.txt"
    execute ":w!" .outputfile
    " call setfperm(outputfile, "rw-rw-rw-")
    " call writefile(lines, outputfile, "a")
endfunction
'''

# [[plugins]]
# repo = 'gabrielelana/vim-markdown' 
# hook_add ='''
# '''

[[plugins]]
repo = 'plasticboy/vim-markdown' 
hook_add ='''
'''

