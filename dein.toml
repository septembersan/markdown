# Usage
# @reload:call dein#recache_runtimepath()
# @lazy  :lazy = 1
# pip install notedown

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add ='''
    nmap <Space>s <Plug>(quickhl-manual-this)
    nmap <Space>se <Plug>(quickhl-manual-reset)
'''

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add ='''
    set laststatus=2
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#whitespace#mixed_indent_algo = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#ale#enabled = 1
    let g:airline#extensions#ale#error_symbol = 'E:'
    let g:airline#extensions#ale#warning_symbol = 'W:'
    " let g:airline_theme = 'dracula'
    " let g:airline_theme = 'iceberg'
    let g:airline_theme = 'tomorrow'
    " let g:airline_theme = 'breezy'
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#show_buffers = 0
    let g:airline#extensions#tabline#tab_nr_type = 1
    let g:airline#extensions#virtualenv#enabled = 1
    let g:airline#extensions#tabline#fnamemod = ':t'
    " let g:airline_left_sep='>'
'''

[[plugins]]
repo = 'MattesGroeger/vim-bookmarks'
hook_add ='''
    nnoremap mb :BookmarkToggle<CR>
    let g:bookmark_sign = '@'
    let g:bookmark_annotation_sign = '☰'
    let g:bookmark_highlight_lines = 1
    let g:bookmark_center = 1
'''

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
    let g:neoterm_size = 14
    let g:neoterm_autoscroll =1
    let g:neoterm_autoinsert = 1
    " terminal position
    let g:neoterm_default_mod='belowright'
    " nnoremap <silent> <C-e><C-e> :call My_TREPLSendSelection()<cr>
    " vnoremap <silent> <C-e><C-e> :TREPLSendSelection<cr>
    " nnoremap <silent> <C-e><C-e> :TREPLSendLine<cr>
    " nnoremap <silent> <C-e><C-f> :TREPLSendFile<cr>'>j0
    nnoremap <silent> ttn  :call My_ActivateCondaEnv()<CR>
    nnoremap <silent> ttl  :Tclear<CR>
    nnoremap <silent> tti  :Topen<cr>
    nnoremap <silent> ttc  :Tclose<cr>
    nnoremap <silent> tto  :Ttoggle<CR>
    nnoremap <silent> ttt  :call My_New_Terminal_Tab()<CR>
    nnoremap <silent> tts  :call My_New_Terminal_VSplit()<cr>
    nnoremap <silent> ttk  :Tkill<cr>
    nnoremap <silent> <F5> :T pdb %<CR><c-w>ki
    tnoremap <silent> <c-g> tdir=$(pwd) && cd .. && clear && echo -e $tdir '->'"\e[32m $(pwd) \e[m"<cr>
    tnoremap <silent> <c-o> tdir=$(pwd) && tdir=$(pwd) && popd && clear && echo -e "\e[32m $(pwd) \e[m" '<-' $tdir <cr>

    let g:terminal_count_id = 1
    function! My_ActivateCondaEnv()
        Tnew
        call My_New_Terminal()
    endfunction

    function! My_New_Terminal()
        let env_name = split(substitute(system('which python'), "/bin/python", "", ""), '/')[-1]
        let cmd = 'conda activate ' . env_name
        exec g:terminal_count_id . "T" cmd
        exec g:terminal_count_id . "Tclear"
        let g:terminal_count_id = g:terminal_count_id + 1
    endfunction

    function! My_TREPLSendSelection()
        Topen
        :TREPLSendLine
    endfunction

    function! My_New_Terminal_Tab()
        " let g:neoterm_fixedsize = winfixheight
        let g:neoterm_size = winheight(0)
        tabnew
        Tnew
        call My_New_Terminal()
        exec "norm \<c-c>"
        let g:neoterm_size = 10
    endfunction

    function! My_New_Terminal_VSplit()
        " let g:neoterm_fixedsize = winfixheight
        let g:neoterm_size = winwidth(0) / 2
        vertical Tnew
        call My_New_Terminal()
        let g:neoterm_size = 10
    endfunction
'''

[[plugins]]
repo = 'jonathanfilip/vim-lucius'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'fneu/breezy'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'vim-scripts/Align'
hook_add = '''
    vnoremap <Space>a :Align
    let g:Align_xstrlen=3
'''

[[plugins]]
repo = 'majutsushi/tagbar'
lazy = 1
hook_add = '''
    " nnoremap <silent><Space>t :call MyOpenBar()<cr>
    nnoremap <silent><Space>t :TagbarOpenAutoClose<cr>
    nnoremap <silent><F8>     :TagbarToggle<cr>
    function! MyOpenBar()
        if expand("%:t") =~ ".*\.md"
            :Toc
        else
            :TagbarOpenAutoClose
        endif
    endfunction
'''
hook_source = '''
    " [Usage]
    " tag jump: p
    let g:tagbar_width = 30
    let g:tagbar_autoshowtag = 0
    let g:tagbar_expand = 1
    let g:tagbar_left = 1
    "set statusline=%F%m%r%h%w¥%=%{tagbar#currenttag('[%s]','')}¥[Pos=%v,%l]¥[Len=%L]
'''

[[plugins]]
repo = 'vim-scripts/zoom.vim'
hook_add = '''
'''

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
    " let g:EasyMotion_do_mapping = 0
    " nmap s <Plug>(easymotion-s2)
    " xmap s <Plug>(easymotion-s2)
    " omap z <Plug>(easymotion-s2)
    " nmap g/ <Plug>(easymotion-sn)
    " xmap g/ <Plug>(easymotion-sn)
    " omap g/ <Plug>(easymotion-tn)
    " let g:EasyMotion_smartcase = 1
    " map <Leader>j <Plug>(easymotion-j)
    " map <Leader>k <Plug>(easymotion-k)
    " let g:EasyMotion_startofline = 0
    " let g:EasyMotion_keys = 'QZASDFGHJKL;'
    " let g:EasyMotion_use_upper = 1
    " let g:EasyMotion_enter_jump_first = 1
    " let g:EasyMotion_space_jump_first = 1
    " hi EasyMotionTarget guifg=#80a0ff ctermfg=81
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add ='''
'''

[[plugins]]
repo = '5t111111/alt-gtags.vim'
hook_add ='''
'''

[[plugins]]
repo = 'fuenor/qfixgrep'
hook_add ='''
'''

# [[plugins]]
# repo = 'fuenor/qfixhowm'
# hook_add ='''
#     let QFixHown_Key = 'g'
#     if has('win64')
#         let howm_dir = 'c:/howm'
#         let howm_fileencoding = 'cp932'
#         let howm_fileformat = 'dos'
#     else
#         let howm_dir = '/home/okada-hxf'
#         let howm_fileencoding = 'utf-8'
#         let howm_fileencoding = 'unix'
#     endif
#     let howm_filename = '%Y/%m/%Y^%m-%d-%H%M%S.txt'
#     let g:QFixHowm_WildCardChapter = 1
#     let QFixHowm_FoldingChapterTitle = 1
#     let QFixHowm_Folding = 0
#
#     nnoremap <space>a gg<S-v><S-g>
#     vnoremap <space>c "*y
#     nnoremap <space>v "*p
# '''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add ='''
    vnoremap <Enter> <Plug>(EasyAlign)
    nnoremap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'pebble8888/doxygen_comment_creator'
hook_add ='''
'''

# [[plugins]]
# repo = 'vim-scripts/gtags.vim'
# hook_add ='''
# '''

[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'
hook_add ='''
    noremap ,d :Dox<CR>
'''

[[plugins]]
repo = 'fuenor/qfixgrep'
hook_add ='''
'''

[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'
hook_add ='''
    noremap ,d :Dox<CR>
'''

[[plugins]]
repo = 'kana/vim-operator-user'
hook_add ='''
'''

[[plugins]]
repo = 'kana/vim-textobj-user'
hook_add ='''
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
hook_add ='''
'''

[[plugins]]
repo = 'thinca/vim-textobj-between'
hook_add ='''
'''

[[plugins]]
repo = 'rhysd/vim-textobj-anyblock'
hook_add ='''
'''

[[plugins]]
repo = 'osyo-manga/vim-operator-stay-cursor'
hook_add ='''
    map y <Plug>(operator-stay-cursor-yank)
'''

[[plugins]]
repo = 'osyo-manga/vim-operator-exec_command'
hook_add ='''
    nmap <expr> <Space>uj operator#exec_command#mapexpr(":Unite line -input=%t")
'''

[[plugins]]
repo = 'bps/vim-textobj-python'
hook_add ='''
    let g:textobj_python_no_default_key_mappings = 1
    xmap af <Plug>(textobj-python-function-a)
    omap af <Plug>(textobj-python-function-a)
    xmap if <Plug>(textobj-python-function-i)
    omap if <Plug>(textobj-python-function-i)

    xmap ac <Plug>(textobj-python-class-a)
    omap ac <Plug>(textobj-python-class-a)
    xmap ic <Plug>(textobj-python-class-i)
    omap ic <Plug>(textobj-python-class-i)

    nmap [f <Plug>(textobj-python-function-p)
    nmap ]f <Plug>(textobj-python-function-n)

    nmap [c <Plug>(textobj-python-class-p)
    nmap ]c <Plug>(textobj-python-class-n)
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add ='''
map t <Plug>(operator-replace)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
hook_add ='''
    " nnoremap sa <Plug>(operator-surround-append-input-in-advance)
    " nnoremap s( <Plug>(operator-surround-append-input-in-advance)(
    " nnoremap sb <Plug>(operator-surround-append-input-in-advance)(
    " nnoremap s{ <Plug>(operator-surround-append-input-in-advance){
    " nnoremap s[ <Plug>(operator-surround-append-input-in-advance)[
    " nnoremap s" <Plug>(operator-surround-append-input-in-advance)"
    " nnoremap s' <Plug>(operator-surround-append-input-in-advance)'
    nmap <silent>s <Plug>(operator-surround-append)
    nmap <silent>ds <Plug>(operator-surround-delete)i
    nmap <silent>cs <Plug>(operator-surround-replace)i

    " nmap <silent>ss <Plug>(operator-surround-append)<Plug>(textobj-multiblock-a)
    " nmap <silent>ds <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
    " nmap <silent>cs <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)

    "map <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-anyblock-a)
    "map <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-anyblock-a)

    "map <silent>sdb <Plug>(operator-surround-delete)<Plug>(textobj-between-a)
    "map <silent>srb <Plug>(operator-surround-replace)<Plug>(textobj-between-a)
'''

[[plugins]]
repo = 'emonkak/vim-operator-comment'
hook_add ='''
'''

[[plugins]]
repo = 'emonkak/vim-operator-sort'
hook_add ='''
'''

[[plugins]]
repo = 'osyo-manga/vim-operator-search'
hook_add ='''
    " nmap <Space>/ <Plug>(operator-search)<cr>
    " vmap <Space>/ <Plug>(operator-search)
    " nmap <Space>; <Plug>(operator-search)if
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
hook_add ='''
let g:linediff_first_buffer_command = 'leftabove new'
let g:linediff_secommand_buffer_command = 'rightbelow vertical new'
vnoremap dl :Linediff<CR>
nnoremap dl :Linediff<CR>
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'
hook_add ='''
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add ='''
    " http://replicity.hateblo.jp/entry/2017/06/03/140731
    call denite#custom#option('default', 'prompt', '>')
    call denite#custom#option('default', 'direction', 'top')
    " key mappings
    " noremap [Denite] <Nop>
    " nmap <Leader>f [Denite]

    nnoremap <silent> <Space>uo :<C-u>Denite -direction=top file_mru<CR>
    " nnoremap <silent> <Space>b :<C-u>Denite -direction=top buffer<CR>
    " nnoremap <silent> <Space>f :<C-u>DeniteBufferDir -direction=top file_rec<CR>
    " nnoremap <silent> <Space>g :<C-u>DeniteBufferDir -direction=top grep<CR>
    nnoremap <silent> <Space>i :<C-u>Denite line -direction=top<CR>
    nnoremap <silent> ,g       :<C-u>Denite grep -direction=top -no-empty -no-quit -buffer-name=search-buffer<CR>
    " nnoremap <silent> <Space>vh :<C-u>Denite help<CR>
    "nnoremap <silent> <Space>n :<C-u>Denite -resume -immediately -select=+1<CR>
    "nnoremap <silent> <Space>p :<C-u>Denite -resume -immediately -select=-1<CR>
    " nnoremap <Space>bk :<C-u>Denite -direction=topleft -cursor-wrap=true bookmark<CR>
    "nnoremap <Space>a :<C-u>DeniteBookmarkAdd<CR>
    " nnoremap <Space>c :Denite command_history<CR>
    " ウィンドウを分割して開く
    call denite#custom#map('_', "<C-h>", '<denite:do_action:split>')
    call denite#custom#map('insert', "<C-h>", '<denite:do_action:split>')
    " ウィンドウを縦に分割して開く
    call denite#custom#map('_', "<C-v>", '<denite:do_action:vsplit>')
    call denite#custom#map('insert', "<C-v>", '<denite:do_action:vsplit>')
    " ウィンドウをタブで開く
    call denite#custom#map('normal', "t", '<denite:do_action:tabswitch>')
    call denite#custom#map('insert', "<c-t>", '<denite:do_action:tabswitch>')
    call denite#custom#map('normal', "l", '<denite:do_action:default>')
    " インサート→ノーマルモード
    call denite#custom#map('insert', "jj", '<denite:enter_mode:normal>')
    call denite#custom#map('insert', "<c-c>", '<denite:quit>')

    if executable('rg')
        " コマンド．file_rec で使うコマンド
        " call denite#custom#var('file_rec', 'command', ['rg', '--files', '--glob', '!.git'])
        " コマンド．grep で使うコマンド
        call denite#custom#var('grep', 'command', ['rg'])
        "call denite#custom#var('grep', 'recursive_opts', )
        "call denite#custom#var('grep', 'final_opts', )
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
    endif

    ".git以下のディレクトリ検索
    " nnoremap <silent> <Space>gf :<C-u>Denite -direction=topleft -cursor-wrap=true
    "      \ -path=`substitute(finddir('.git', './;'), '.git', '', 'g')`
    "      \ file_rec/git<CR>
    " call denite#custom#source('file'    , 'matchers', ['matcher_cpsm', 'matcher_fuzzy'])
    call denite#custom#source('file'    , 'matchers', ['matcher_substring'])
    call denite#custom#source('buffer'  , 'matchers', ['matcher_substring'])
    call denite#custom#source('file_mru', 'matchers', ['matcher_substring'])
    call denite#custom#source('file_rec', 'matchers', ['matcher_substring'])
    call denite#custom#alias('source', 'file_rec/git', 'file_rec')
    call denite#custom#var('file_rec/git', 'command',
      \ ['git', 'ls-files', '-co', '--exclude-standard'])
'''

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# if = 'has("nvim")'
# on_i = 1
# hook_source = '''
#     let g:deoplete#enable_at_startup = 1
#     let g:deoplete#auto_complete_start_length = 1
#     let g:deoplete#enable_smart_case = 1
#     let g:deoplete#auto_complete_delay = 0
#     " let g:deoplete#enable_camel_case = 1
#     " let g:deoplete#enable_ignore_case = 0
#     let g:deoplete#enable_refresh_always = 0
#     " let g:deoplete#file#enable_buffer_path = 1
#     " let g:deoplete#max_list = 10000
#     call deoplete#custom#source('LanguageClient',
#            \ 'min_pattern_length',
#            \ 2)
#     " let g:deoplete#omni_patterns = {
#     "   \ 'python': '[^. *\t]\.\w*',
#     "   \}
# '''

# [[plugins]]
# repo = 'prabirshrestha/vim-lsp'
# hook_add = '''
# '''

[[plugins]]
repo = 'iyuuya/denite-ale'

[[plugins]]
repo = 'w0rp/ale'
build = 'pip install flake8 flake8-import-order autopep8 black flake8-isort'
hook_add = '''
    " Installation: pip install flake8 flake8-import-order autopep8 black isort
    let g:ale_enabled = 0
    let g:ale_sign_error = '>>'
    let g:ale_sign_warning = '??'
    " let g:ale_lint_on_save = 1
    let g:ale_lint_on_text_changed = 0
    let g:ale_statusline_format = ['x %d', '? %d', 'o ok']
    let g:ale_linters = {
                \   'python': ['flake8'],
                "\   'markdown': ['alex'],
                \   'markdown': ['textlint'],
                \   'javascript': ['eslint'],
                \   'JSON': ['jq']
                \}
    let g:ale_fixers = {
    \ 'python': ['black', 'isort'],
    \ 'markdown': [
    \   {buffer, lines -> {'command': 'textlint -c ~/.config/textlintrc -o /dev/null --fix --no-color --quiet %t', 'read_temporary_file': 1}}
    \   ],
    \ }

    nmap [ale] <Nop>
    map <c-a> [ale]
    nmap <silent> [a <Plug>(ale_previous)
    nmap <silent> ]a <Plug>(ale_next)
    nmap <silent> [ale]<c-f> <Plug>(ale_fix)

    highlight clear ALEErrorSign
    highlight clear ALEWarningSign
'''

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'janko-m/vim-test'
depends = ['vim-dispatch']
hook_add = '''
    let g:test#strategy = 'dispatch'
'''

[[plugins]]
repo = 'aliev/vim-compiler-python'

# [[plugins]]
# repo = 'hellosputnik/vim-plugin'
# hook_add = '''
#     set completeopt-=menu
#     set completeopt+=menuone
#     set completeopt-=longest
#     set completeopt-=preview
#     set completeopt+=noinsert
#     set completeopt-=noselect
#     set completeopt+=preview
#     autocmd CompleteDone * if !pumvisible() | pclose | endif
#     set belloff+=ctrlg
#     nmap <silent> <buffer> gK <Plug>(kite-hover)
#     let g:kite_documentation_continual=1
#     let g:kite_preview_code=1
#     let g:kite_override_sign_column_highlight=0
#     set statusline=%<%f¥ %h%m%r%{kite#statusline()}%=%-14.(%l,%c%V%)¥ %P
#     set laststatus=2
# '''

[[plugins]]
repo = 'neovim/python-client'

[[plugins]]
repo = 'tyru/caw.vim.git'
hook_add ='''
    nmap cc <Plug>(caw:hatpos:toggle)
    vmap cc <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'dracula/vim'

[[plugins]]
repo = 'xolox/vim-misc'
hook_add ='''
'''

[[plugins]]
repo = 'xolox/vim-session'
depends = ['xolox/vim-misc']
hook_add ='''
    nnoremap <F10> :SaveSession
    nnoremap <silent> <F11> :OpenSession<CR>

    " 現在のディレクトリ直下の .vimsessions/ を取得
    let s:local_session_directory = '~/.config/nvim/sessions'
    " session保存ディレクトリをそのディレクトリの設定
    " let g:session_directory = s:local_session_directory
    let g:session_directory = "~/.cache/dein/repos/github.com/xolox"
    " vim終了時に自動保存
    let g:session_autosave = 'yes'
    " 引数なしでvimを起動した時にsession保存ディレクトリのdefault.vimを開く
    "let g:session_autoload = 'yes'
    " 5分間に1回自動保存
    " let g:session_autosave_periodic = 5
    unlet s:local_session_directory
    let g:session_autoload = 'no'
'''

[[plugins]]
repo = 'alfredodeza/pytest.vim'
on_ft = 'python'
hook_add ='''
    " function! Pytest_session()
    "     :Pytest file
    "     :Pytest session
    " endfunction
    nnoremap <silent> tps :Pytest session<cr>
    nnoremap <silent> tpj :call My_python_file()<cr>
    nnoremap <silent> tpc :Pytest class<cr>
    nnoremap <silent> tpf :Pytest function -s -vv<cr>
    nnoremap <silent> tpe :Pytest fails<cr>
    nnoremap <silent> tpn :Pytest next<cr>
    nnoremap <silent> tpp :Pytest previous<cr>
    nnoremap <silent> tpd :Pytest file --pdb<cr>
    nnoremap <silent> tpo :call Create_pytest_file()<cr>
    function! My_python_file()
        :w
        :Pytest file -s -vv
    endfunction
    function! Create_pytest_file()
        :tabedit ‾/hiroomi.py
    endfunction

'''

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add ='''
    nnoremap <silent> <S-s> :OverCommandLine<CR>%s///g<Left><Left><Left>
    vnoremap <silent> <S-s> :OverCommandLine<CR>%s///g<Left><Left><Left>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add ='''
    " Usage:
    "   * reference other branch file in current branch.
    "       :Gvsplit origin/other_branch:filename.hoge
    "       :Gedit other_branch:%
    "   * cancel modification before commit.
    "       :Gread
    "   * git add
    "       :Gwrite
    " Usage: 3-way diff :Gstatus -> D -> :diffget //2 |diffup -> :diffget //3 |diffup -> ]c -> :only
    " Usage: recent master diff :Git fetch -> :Gvdiff -> origin/master
    " nnoremap <silent> <Space>vb :Gblame<cr>
    autocmd FileType fugitive nnoremap <silent> <buffer> <c-c> :q<cr>
    nnoremap <silent> <Space>gd :Gdiff<cr>
    nnoremap <silent> <Space>gb  :Gbranch<cr>
    " nnoremap <silent> <Space>vl :Glog<cr>
    " nnoremap <silent> <Space>gr :Gread<cr>
    nnoremap <Space>ge :Gvdiff :%<left><left>
    nnoremap <Space>gp :Gpull
    nnoremap <Space>gss :Gstatus<cr>
    " nnoremap <Space>gg :call My_Ggrep()<cr>
    " nnoremap <Space>gj :call My_Cursor_Under_Ggrep()<cr>
    nnoremap <Space>gco :Gcommit -m ""<left>
    nnoremap <Space>gca :Gcommit -amend<cr>
    " nnoremap <Space>gr :Gvsplit :<left><left>
    nnoremap gst :Git stash save ""<left>
    nnoremap <silent> gss :Git stash list<cr>
    nnoremap gsa :Git stash apply stash@{}<left>
    " function! My_Cursor_Under_Ggrep()
    "     :Gcd
    "     call feedkeys("yiw")
    "     call feedkeys(",ug")
    "     call feedkeys("\<Space>p")
    "     call feedkeys("\<cr>")
    " endfunction
    " function! My_Ggrep()
    "     :Gcd
    "     call feedkeys(",ug")
    " endfunction
'''

[[plugins]]
repo = 'mzlogin/vim-markdown-toc'
hook_add ='''
'''

[[plugins]]
repo = 'kmnk/vim-unite-giti'
hook_add ='''
    " Usage: branch switch -> giti/branch new -> switch(`git branch -b`)
    nnoremap <silent> <Space>gl  :Gitv<CR>
    nnoremap <silent> <Space>gL  :Gitv!<CR>
    nnoremap <silent> <Space>gsu  :<C-u>Unite giti/status<CR>
    " nnoremap <silent> <Space>gg  :<C-u>Unite giti/grep<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add ='''
'''

[[plugins]]
repo = 'gregsexton/gitv'
hook_add ='''
    " Usage: Frequently cmd
    " ------------------------
    " > https://wonderwall.hatenablog.com/entry/2016/03/26/211710
    "
    " * ファイルごとのdiffを確認する場合
    "   :Gitv! -> D (diff) # compare file(between HEAD and select commit)
    " * ログからdiffを確認する場合(一覧)
    "   :Gitv  -> Enter -> zM
    "   :Gitv  -> Enter -> Enter on target file
    nnoremap <Space>gi :GitGutterLineHighlightsToggle<cr>
    nmap ]g <Plug>(GitGutterNextHunk)
    nmap [g <Plug>(GitGutterPrevHunk)
    nmap <Space>gia <Plug>(GitGutterStageHunk)
    nmap <Space>giu <Plug>(GitGutterUndoHunk)
    nmap <Space>gip <Plug>(GitGutterPreviewHunk)

    autocmd FileType git call s:gitv_my_settings()
    function! s:gitv_my_settings()
        " set statusline+=%{fugitive#statusline()}
        setlocal foldlevel=99
        nmap <silent><buffer> t O
        nmap <silent><buffer> v s
    endfunction
'''

[[plugins]]
repo = 'plytophogy/vim-virtualenv'
hook_add ='''
    nnoremap <F7> :VirtualEnvActivate
    nnoremap <F6> :VirtualEnvDeactivate<cr>
'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add ='''
    let g:winresizer_start_key = 'mr'
    let g:winresizer_keycode_cancel = 'c'
'''

[[plugins]]
repo = 'vim-scripts/DrawIt'
hook_add ='''
'''

[[plugins]]
repo = 'gyim/vim-boxdraw'
hook_add ='''
    nnoremap dm :DrawIt
    nnoremap ds :DrawIt!
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add ='''
'''

[[plugins]]
repo = 'mattn/webapi-vim'
hook_add ='''
" > <https://www.key-p.com/blog/staff/archives/20732>
nnoremap <silent><F4> :call MyFeed()<cr>

function! MyFeed()
    tabnew
    let result = webapi#feed#parseURL("http://sampo-03.asou.nec.co.jp:50080/dashboard/projects.atom?rss_token=-jHpUfyr4qgdP4AkgNBe")
    let count = 0
    let lines = []
    for item in result
        let str = join(["[ ]", item.date, item.title, item.content, item.link], ' :')
        call append(count, str)
        call add(lines, str)
        let count += 1
        " echo keys(item)
    endfor
    let outputfile = "~/.cache/dein/repos/github.com/mattn/save.txt"
    execute ":w!" .outputfile
    " call setfperm(outputfile, "rw-rw-rw-")
    " call writefile(lines, outputfile, "a")
endfunction
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_add ='''
    let g:vim_markdown_toc_autofit = 1
    let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown', 'rst']
hook_add ='''
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ['markdown', 'rst', 'txt']
hook_add ='''
    let g:netrw_nogx = get(g:, 'netrw_nogx', 1)
    nmap gx <Plug>(openbrowser-smart-search)
    vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'vim-scripts/DirDiff.vim'
hook_add ='''
'''

[[plugins]]
repo = 'godlygeek/tabular'
hook_add ='''
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add ='''
    let g:yankround_max_history = 35
    nmap p <Plug>(yankround-p)
    nmap P <Plug>(yankround-P)
    nmap gp <Plug>(yankround-gp)
    nmap gP <Plug>(yankround-gP)
    nmap <C-p> <Plug>(yankround-prev)
    nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'mhinz/neovim-remote'
build = 'pip install neovim-remote'
hook_add ='''
    " Installation: pip3 install neovim-remote
    " Usage: README.md
'''

[[plugins]]
repo = 'honza/vim-snippets'
hook_add ='''
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
hook_add ='''
    nnoremap <c-t> :TableModeToggle<cr>
    let g:table_mode_corner='|'
'''

[[plugins]]
repo = 'billyvg/tigris.nvim'
on_ft = ['javascript', 'javascript.jsx']
hook_post_update = '''
  let g:dein#plugin.build = './install.sh'
'''
hook_add ='''
    let g:tigris#enabled = 1
    let g:tigris#on_the_fly_enabled = 1
    let g:tigris#delay = 300
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add ='''
'''

[[plugins]]
repo = 'szkny/SplitTerm'
hook_add ='''
'''

[[plugins]]
repo = 'szkny/Ipython'
on_ft = 'python'
hook_add ='''
    nnoremap  <silent> <c-e><c-e> :IpythonLine<CR>
    nnoremap  <silent> <c-e><c-f> :IpythonRun<CR>
    vnoremap  <silent> <c-e><c-e> :VIpython<CR>
    nnoremap  <silent> <c-e><c-u> :VIpython<CR>
    nnoremap  <silent> <c-e><c-l> :IpythonClear<CR>
    nnoremap  <silent> <c-e><c-i> :IpythonInspection<CR>
    nnoremap  <silent> <c-e><c-d> :IpythonDebug<cr>
    " Debug Usage:
    " c-l: screen clear
    " c-n: next
    " c-b: set break point
    " c, s, u, r, p, p
 
    " nnoremap <c-e>i :call setline(".", "inspect.getmembers(".getline('.').")")<cr>
 
    " ipythonコマンドのコマンドライン引数
	let g:ipython_startup_options = ['--no-confirm-exit']
 
	" ipython起動時実行するコマンドリスト
	let g:ipython_startup_command = [
        \'import numpy as np',
        \'import inspect']
 
	" ウィンドウ幅 ( 0 にすると自動で設定)
	let g:ipython_window_width = 0
'''

[[plugins]]
repo = 'nelstrom/vim-visual-star-search'
hook_add ='''
'''

[[plugins]]
repo = 'thaerkh/vim-workspace'
hook_add ='''
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add ='''
    autocmd! FileType fzf nnoremap <buffer> <silent> q :q<cr>

    let g:fzf_action = {
        \ 'ctrl-t': 'tab drop',
        \ 'ctrl-s': 'split',
        \ 'ctrl-v': 'vsplit',
        \ 'ctrl-m': 'cd',
        \ 'ctrl-l': 'e' }

    " nmap <Space>f <plug>(fzf-maps-n)
    " xmap <Space>f <plug>(fzf-maps-x)
    " omap <Space>f <plug>(fzf-maps-o)
    nnoremap <Space>ff :Rgf<cr>
    nnoremap <Space>fh :Files ~/<cr>
    nnoremap <space>gf :GFiles<cr>
    nnoremap <space>bf :OpenBuffers<cr>
    " nnoremap <Space>gss :GFiles?<cr>
    nnoremap <Space>bl :BLines<cr>
    nnoremap <Space>gg :call My_Ggrep()<cr>
    nnoremap <Space>o :History<cr>
    nnoremap <Space>vh :Helptags<cr>
    nnoremap <Space>dd :Directorys<cr>
    nnoremap <Space>dh :call DirectorysOnHome()<cr>
    nnoremap <Space>fg :call FilesRepository()<cr>
    nnoremap <Space>gr :Repos<cr>
    nnoremap <Space>gj :call My_Cursor_Under_Ggrep()<cr>
    vnoremap <Space>gj :<c-u>Rg <c-r>0<cr>
    nnoremap <Space>gh :call RgInGhq()<cr>
    nnoremap <Space>vr :call RgInVimPlug()<cr>
    nnoremap <Space>vf :Files ~/.cache/dein/repos/github.com<cr>
    nnoremap <Space>mm :Marks<cr>
    nnoremap ta :Tabs<cr>

    command! -bang -nargs=? Directorys
      "\ call fzf#run(fzf#wrap({'source': 'find -type d', 'up': '30%'}))
      \ call fzf#run(fzf#wrap({'source': 'find -type d', 'sink': 'e', 'up': '30%'}))

    fu! FilesRepository()
        silent cd `ghq root`
        call fzf#run(fzf#wrap({'source': 'rg --files', 'up': '30%'}))
    endfu

    fu! DirectorysOnHome()
        silent cd
        call fzf#run(fzf#wrap({'source': 'find -type d', 'up': '30%'}))
    endfu

    fu! RgInGhq()
        silent cd `ghq root`
        Rg
    endfu

    fu! RgInVimPlug()
        silent cd `~/.cache/dein/repos/github.com`
        Rg
    endfu

    command -bang -nargs=0 OpenBuffers
      \ call fzf#run(fzf#wrap({'source': map(filter(range(1, bufnr('$')), 'buflisted(v:val)'),
      \   'bufname(v:val)'), 'up': '30%'}))

    command! -bang -nargs=0 Repos
      \ call fzf#run(fzf#wrap({'source': 'ghq list -p', 'up': '30%'}))

    command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

    command! -bang -nargs=0 Rgf
      \ call fzf#run(fzf#wrap({'source': 'rg --files', 'up': '30%'}))

    command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
      \   fzf#vim#with_preview({'options': '--exact --reverse'}, 'right:50%:wrap'))

    command! -bang -nargs=0 Tabs
      \ call fzf#run(fzf#wrap({'source': s:GetTabList(), 'up': '30%'}))

    function! My_Cursor_Under_Ggrep()
        Gcd
        call fzf#vim#grep(
          \   'rg --line-number --no-heading '.expand('<cword>'), 0,
          \   fzf#vim#with_preview({'options': '--exact --reverse'}, 'right:50%:wrap'))
    endfunction

    function! My_Ggrep()
        Gcd
        Rg
    endfunction

    function! s:changebranch(branch) 
        execute 'Git checkout' . a:branch
        call feedkeys("i")
    endfunction

    function! s:GetTabList()
        let s:tabList = execute('tabs')
        let s:textList = []
        for tabText in split(s:tabList, '\n')
            let s:tabPageText = matchstr(tabText, '^タブページ')
            if !empty(s:tabPageText)
                continue
            endif
            let s:tabPageText = matchstr(tabText, '^Tab page')
            if !empty(s:tabPageText)
                continue
            endif
            if empty(s:tabPageText)
                let s:text = matchstr(tabText, '[^> +].*')
                let s:textList = add(s:textList, printf('%s', s:text))
            endif
        endfor
        return s:textList
    endfunction

    command! -bang Gbranch call fzf#run(fzf#wrap({
      \ 'source': 'git branch -a --no-color | grep -v "^\* " ', 
      \ 'sink': function('s:changebranch')}))

    " Reverse the layout to make the FZF list top-down
    let $FZF_DEFAULT_OPTS='--exact --layout=reverse --preview "bat --color=always --style=header,grid --line-range :100 {}"'

    " Using the custom window creation function
    let g:fzf_layout = { 'window': 'call FloatingFZF()' }

    " Function to create the custom floating window
    function! FloatingFZF()
        " creates a scratch, unlisted, new, empty, unnamed buffer
        " to be used in the floating window
        let buf = nvim_create_buf(v:false, v:true)

        " 90% of the height
        let height = float2nr(&lines * 0.9)
        " 60% of the height
        let width = float2nr(&columns * 0.85)
        " horizontal position (centralized)
        let horizontal = float2nr((&columns - width) / 2)
        " vertical position (one line down of the top)
        let vertical = 1

        let opts = {
            \ 'relative': 'editor',
            \ 'row': vertical,
            \ 'col': horizontal,
            \ 'width': width,
            \ 'height': height
            \ }

        " open the new window, floating, and enter to it
        call nvim_open_win(buf, v:true, opts)
    endfunction
'''

[[plugins]]
repo = 'skanehira/translate.vim'
hook_add = '''
    " Reqiurement: installed go lang
    " $ git clone https://github.com/skanehira/gtran.git
    " $ cd gtran
    " export GOPATH=$HOME/.go
    " export GOBIN=$GOPATH/bin
    " $ go install
    let g:translate_source = "en"
    let g:translate_target = "ja"
    let g:translate_winsize = 10
'''


[[plugins]]
repo = 'tpope/vim-scriptease'
hook_add = '''
    " Usage:
    " :Breakadd
    " <target command>
    " >echom <variable name>
    nnoremap <silent> <Space>vb :call MybreakToggle()<cr>

    fu! MybreakToggle()
        if !exists('g:bp_idx')
            let g:bp_idx = 0
        endif

        let file_name = expand('%:p')
        if file_name == ""
            return
        endif

        let line_nr = line('.')
        let break_point_dict = MybreakReferenceOnBuffer(file_name)
        if has_key(break_point_dict, printf('%d', line_nr))
            let sign_id = break_point_dict[line_nr]
            call Mybreakdel(file_name, sign_id)
            return
        endif
        call Mybreakadd(file_name, line_nr)
    endfu

    fu! Mybreakadd(file_name, line_nr)
        sign define breakpoint text=B texthl=ZenSpace
        let name = 'breakpoint'
        let g:bp_idx += 1
        let g:line_dict = {a:line_nr: g:bp_idx}

        " add sign
        exe "sign place ". g:bp_idx ." line=" . a:line_nr ." name=". name ." file=" . a:file_name
        breakadd here
    endfu

    fu! Mybreakdel(file_name, sign_id)
        exe "sign unplace ". a:sign_id ." file=". a:file_name
        breakdel here
    endfu

    fu! MybreakReferenceOnBuffer(file_name)
        let sign_raw = MyRedirToVariable("sign place file=" . a:file_name)
        let sign_infos = split(sign_raw, '\n')

        let break_point_dict = {} "line_nr: sign_id
        for sign_info in sign_infos
            let result = matchlist(sign_info, 'line=\(\d\+\)\W\+id=\(\d\+\)\W\+name=breakpoint\c')
            if len(result) <# 1
                continue
            endif
            let break_point_dict[result[1]] = result[2]
        endfor
        return break_point_dict
    endfu

    fu! MyRedirToVariable(cmd)
        redir => output
        silent exe a:cmd
        redir END
        return output
    endfu
'''

[[plugins]]
repo = 'szymonmaszke/vimpyter'
hook_add ='''
    autocmd Filetype ipynb nmap <silent><Space>jb :VimpyterInsertPythonBlock<CR>
    autocmd Filetype ipynb nmap <silent><Space>jj :VimpyterStartJupyter<CR>
    autocmd Filetype ipynb nmap <silent><Space>jn :VimpyterStartNteract<CR>
'''

# [[plugins]]
# repo = 'Shougo/echodoc.vim'
# hook_add ='''
#     " To use echodoc, you must increase 'cmdheight' value.
#     set cmdheight=2
#     let g:echodoc_enable_at_startup = 1
#     let g:echodoc#type = 'signature'
# '''

[[plugins]]
repo = 'numirias/semshi'
hook_add ='''
    let g:semshi#error_sign = v:false
'''

[[plugins]]
repo = 'azadkuh/vim-cmus'
hook_add ='''
    " Usage: sudo sshfs -o allow_other -o IdentityFile=/home/hiroomi/.ssh/id_rsa root@192.168.11.204:/var/samba_dir/hobby/music /mnt/mount/music
'''

[[plugins]]
repo = 'sakhnik/nvim-gdb'
build = 'bash install.sh'
hook_add ='''
    " nnoremap <c-e><c-d> :GdbStartPDB python -m pdb %:p<cr>
    " let g:nvimgdb_config_override = {
    "  \ 'key_until':      'u',
    "  \ 'key_continue':   'c',
    "  \ 'key_next':       'n',
    "  \ 'key_step':       's',
    "  \ 'key_finish':     'E',
    "  \ 'key_breakpoint': 'b',
    "  \ 'key_frameup':    '<c-p>',
    "  \ 'key_framedown':  '<c-n>',
    "  \ 'key_eval':       'p',
    "  \ 'set_tkeymaps': "NvimGdbNoTKeymaps",
    "  \ 'set_tkeymaps':   'function("GdbCallAsync", "keymaps.set_t")',
    "  \ 'set_keymaps':    'function("GdbCallAsync", "keymaps.set")',
    "  \ 'unset_keymaps':  'function("GdbCallAsync", "keymaps.unset")',
    "  \ 'sign_current_line': "=>",
    "  \ 'sign_breakpoint': ['B', 'B2', 'B3', 'B4', 'B5'],
    "  \ 'split_command': 'vertical split'
    "  \ }
    let g:nvimgdb_config_override = {
    "\ 'set_tkeymaps': "NvimGdbNoTKeymaps",
    \ 'sign_current_line': "=>",
    \ 'sign_breakpoint': ['B', 'B2', 'B3', 'B4', 'B5'],
    \ 'split_command': 'vertical split'
    \ }
    augroup nvimgdb_python_keymaps
        autocmd!
        autocmd User NvimGdbStart call s:nvimgdb_python_keymaps()
        autocmd User NvimGdbCleanup call s:nvimgdb_python_keymaps_cleanup()
    augroup END

    augroup nvimgdb_python_settings
        autocmd!
        autocmd FileType python call s:nvimgdb_python_settings()
    augroup END

    function! s:nvimgdb_python_keymaps_cleanup() abort
        nunmap <space>k
        nunmap <space>j
        nunmap r
        nunmap c
        nunmap <space>n
        nunmap u
        nunmap s
        nunmap f
        nunmap <space>b
        nunmap <c-p>
        nunmap <c-n>
        nunmap p
        vunmap p
        nnoremap <space>q :call My_tabclose()<cr>
    endfunction

    function! s:nvimgdb_python_keymaps() abort
        nnoremap <silent><space>k :call My_GdbDebugBack()<cr>
        nnoremap <silent><space>j :call My_GdbDebugJump()<cr>
        nnoremap <silent>r :call My_GdbDebugReturn()<cr>
        nnoremap <silent>u :GdbUntil<cr>
        nnoremap <silent>c :GdbContinue<cr>
        nnoremap <silent><space>n :GdbNext<cr>
        nnoremap <silent>s :GdbStep<cr>
        nnoremap <silent>f :GdbFinish<cr>
        nnoremap <silent><space>b :GdbBreakpointToggle<cr>
        nnoremap <silent><c-p> :GdbFrameUp<cr>
        nnoremap <silent><c-n> :GdbFrameDown<cr>
        nnoremap <silent>p :GdbEvalWord<cr>
        vnoremap <silent>p :GdbEvalRange<cr>
        nnoremap <silent><space>q :call My_GdbDebugStop()<cr>
    endfunction

    function! My_GdbDebugBack()
        let line_number = line('.') - 2
        call GdbCustomCommand("jump " . line_number)
        GdbNext
    endfunction

    function! My_GdbDebugJump()
        let line_number = line('.') - 1
        call GdbCustomCommand("jump " . line_number)
        GdbNext
    endfunction

    function! My_GdbDebugReturn()
        call GdbCustomCommand("r")
        GdbNext
    endfunction

    function! My_GdbDebugStop()
        GdbDebugStop
        tabprevious
    endfunction

    function! s:nvimgdb_python_settings() abort
        nnoremap <silent> <c-e>d :call My_GdbStartPDB()<cr>
    endfunction

    function! My_GdbStartPDB()
        let pos = getpos(".")
        GdbStartPDB python -m pdb %:p<cr>
        call feedkeys("jj")
        exec "normal \<c-w>\<c-w>"
        sleep 750ms
        call setpos('.', pos)
        GdbUntil
    endfunction

    " augroup nvimgdb_bash_settings
    "     autocmd!
    "     autocmd FileType bash call s:nvimgdb_bash_settings()
    " augroup END
    function! s:nvimgdb_bash_settings() abort
        nnoremap <silent> <c-e><c-d> :GdbStartPDB bashdb pdb %:p<cr>
        nnoremap <silent> <c-q><c-q> :GdbDebugStop<cr>
    endfunction
'''

[[plugins]]
repo = 'yuttie/comfortable-motion.vim'
hook_add ='''
    let g:comfortable_motion_no_default_key_mappings = 1
    nnoremap <silent> <C-d> :call comfortable_motion#flick(100)<cr>
    nnoremap <silent> <C-u> :call comfortable_motion#flick(-100)<cr>

    nnoremap <silent> <C-f> :call comfortable_motion#flick(200)<cr>
    " nnoremap <silent> <C-b> :call comfortable_motion#flick(-200)<cr>
'''

[[plugins]]
repo = 'justinmk/vim-sneak'
hook_add ='''
    map f <Plug>Sneak_f
    map F <Plug>Sneak_F

    map ; <Plug>Sneak_;
    map , <Plug>Sneak_,
'''

[[plugins]]
repo = 'iamcco/mathjax-support-for-mkdp'

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
build = 'cd app & yarn install'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
hook_add ='''
    " let g:mkdp_browser= 'chrome'
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
marged = 0
rev = 'release'
hook_add = '''
    " Usage: 
    " pip install numpydoc
    nnoremap <space>cc :CocConfig<cr>
    nnoremap <space>cs :CocCommand snippets.editSnippets<cr>

    inoremap <expr> <c-i> coc#refresh()

    set hidden
    set nobackup
    set nowritebackup

    set cmdheight=2

    set updatetime=100
    set shortmess+=c

    set signcolumn=yes

    nmap <silent> <c-j><c-j> <Plug>(coc-definition)
    nmap <silent> <c-j><c-i> <Plug>(coc-type-definition)
    " nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> <c-j><c-r> <Plug>(coc-references)
    nmap <silent> <space>cr <Plug>(coc-rename)
    " nmap <silent> <c-a><c-f> <Plug>(coc-format)

    nnoremap <silent> <c-j><c-v> :call <sid>coc_operation('vs')<cr>
    nnoremap <silent> <c-j><c-s> :call <sid>coc_operation('split')<cr>
    nnoremap <silent> <c-j><c-t> :call <sid>coc_operation('tab')<cr>
    nnoremap <silent> <c-j><c-k> :call <sid>show_documentation()<cr>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    nnoremap <expr><c-j><c-f> coc#util#has_float() ? coc#util#float_scroll(1) : "\<c-f>"
    nnoremap <expr><c-j><c-b> coc#util#has_float() ? coc#util#float_scroll(0) : "\<c-b>"
    " nnoremap <expr>q coc#util#has_float() ? coc#util#float_hide() : "q"
    " inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    " inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    " inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

    " inoremap <silent><expr> <c-l> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    fu! s:coc_operation(operation)
        if a:operation == 'vs'
            vs
        elseif a:operation == 'split'
            split
        else
            tab sp
        endif
        call CocActionAsync('jumpDefinition')
    endfu

    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    inoremap <silent><expr> <tab>
       \ pumvisible() ? coc#_select_confirm() :
       \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
       \ <SID>check_back_space() ? "\<TAB>" :
       \ coc#refresh()

    " Use <C-l> for trigger snippet expand.
    " imap <tab> <Plug>(coc-snippets-expand)

    " Use <C-j> for select text for visual placeholder of snippet.
    " vmap <tab> <Plug>(coc-snippets-select)

    let g:coc_snippet_next = '<tab>'
    let g:coc_snippet_prev = '<S-tab>'

    " Use <C-j> for both expand and jump (make expand higher priority.)
    " imap <C-j> <Plug>(coc-snippets-expand-jump)
    let g:coc_global_extensions = ['coc-yank', 'coc-lists', 'coc-calc', 'coc-cmake', 'coc-floaterm', 'coc-highlight', 'coc-markdownlint', 'coc-todolist']
    " let g:coc_global_extensions = ['coc-python', 'coc-tsserver', 'coc-yank', 'coc-lists', 'coc-calc', 'coc-cmake', 'coc-floaterm', 'coc-highlight', 'coc-markdownlint', 'coc-todolist']
'''

[[plugins]]
repo = 'voldikss/vim-floaterm'
hook_add = '''
    let g:floaterm_position='center'
    " let g:floaterm_keymap_toggle='ttf'
    let g:floaterm_background='#1d2815'
'''

[[plugins]]
repo = 'flrnd/candid.vim'
hook_add = '''
'''

# [[plugins]]
# repo = 'kiteco/vim-plugin'
# hook_add = '''
#     " Attention: $HOME/.config/nvim/pack/kite/start/vim-plugin
#     let g:kite_auto_complete=1
#     let g:kite_snippets=1
#     let g:kite_tab_complete=1
#  
#     let g:kite_previous_placeholder = '<c-p>'
#     let g:kite_next_placeholder = '<c-n>'
#     nmap <silent> <buffer> <c-j><c-k> <Plug>(kite-docs)
#     " nmap <silent> <buffer> <c-j><c-k> <Plug>(kite-hover)
#     " let g:kite_documentation_continual=1
# '''

# [[plugins]]
# repo = 'neomake/neomake'
# hook_add = '''
#     call neomake#configure#automake('w')
#     " let g:neomake_open_list = 2
# '''

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
hook_add = '''
    nnoremap <silent> <Space>e :Defx -split=vertical -toggle -winwidth=30 -direction=topleft -auto-cd .<cr>
    augroup nvimgdb_python_keymaps
        autocmd!
        autocmd FileType defx call s:defx_my_settings()
        function! s:defx_my_settings() abort
          " Define mappings
          nnoremap <silent><buffer><expr> ad
          \ defx#do_action('add_session')
          nnoremap <silent><buffer><expr> l
          \ defx#do_action('drop')
          nnoremap <silent><buffer><expr> <c-t>
          \ defx#do_action('open', 'tabnew')
          nnoremap <silent><nowait><buffer><expr> yy
          \ defx#do_action('copy')
          nnoremap <silent><buffer><expr> <s-y>
          \ defx#do_action('yank_path')
          nnoremap <silent><buffer><expr> m
          \ defx#do_action('move')
          nnoremap <silent><buffer><expr> p
          \ defx#do_action('paste')
          nnoremap <silent><buffer><expr> <c-v>
          "\ defx#do_action('open', 'vsplit')
          \ defx#do_action('multi', [['drop', 'vsplit'], 'quit'])
          nnoremap <silent><buffer><expr> s
          \ defx#do_action('multi', [['drop', 'split'], 'quit'])
          nnoremap <silent><buffer><expr> P
          \ defx#do_action('open', 'pedit')
          nnoremap <silent><buffer><expr> o
          \ defx#do_action('open_or_close_tree')
          nnoremap <silent><buffer><expr> K
          \ defx#do_action('new_directory')
          nnoremap <silent><buffer><expr> N
          \ defx#do_action('new_file')
          nnoremap <silent><buffer><expr> M
          \ defx#do_action('new_multiple_files')
          nnoremap <silent><buffer><expr> C
          \ defx#do_action('toggle_columns',
          \                'mark:indent:icon:filename:type:size:time')
          nnoremap <silent><buffer><expr> S
          \ defx#do_action('toggle_sort', 'time')
          nnoremap <silent><nowait><buffer><expr> dd
          \ defx#do_action('remove_trash')
          nnoremap <silent><buffer><expr> r
          \ defx#do_action('rename')
          nnoremap <silent><buffer><expr> !
          \ defx#do_action('execute_command')
          nnoremap <silent><buffer><expr> x
          \ defx#do_action('execute_system')
          nnoremap <silent><buffer><expr> yp
          \ defx#do_action('yank_path')
          nnoremap <silent><buffer><expr> .
          \ defx#do_action('toggle_ignored_files')
          nnoremap <silent><buffer><expr> ;
          \ defx#do_action('repeat')
          nnoremap <silent><buffer><expr> h
          \ defx#do_action('cd', ['..'])
          nnoremap <silent><buffer><expr> ~
          \ defx#do_action('cd')
          nnoremap <silent><buffer><expr> <c-c>
          \ defx#do_action('quit')
          nnoremap <silent><buffer><expr> <Space>
          \ defx#do_action('toggle_select') . 'j'
          nnoremap <silent><buffer><expr> *
          \ defx#do_action('toggle_select_all')
          nnoremap <silent><buffer><expr> j
          \ line('.') == line('$') ? 'gg' : 'j'
          nnoremap <silent><buffer><expr> k
          \ line('.') == 1 ? 'G' : 'k'
          nnoremap <silent><buffer><expr> <C-l>
          \ defx#do_action('redraw')
          nnoremap <silent><buffer><expr> <C-g>
          \ defx#do_action('print')
          " nnoremap <silent><buffer><expr> cd
          "\ defx#do_action('change_vim_cwd')
        endfunction
    augroup END
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

